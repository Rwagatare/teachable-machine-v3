// this is revised service-worker with workbox for optimized lighthouse score

import { precacheAndRoute, cleanupOutdatedCaches } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst, NetworkFirst } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';
import { BackgroundSyncPlugin } from 'workbox-background-sync';

console.log('ðŸš€ Workbox Service Worker loaded');

// Detect development environment
const isDevelopment = self.location.hostname === 'localhost' || 
                     self.location.hostname === '127.0.0.1' || 
                     self.location.hostname.includes('192.168') ||
                     self.location.hostname.includes('10.');

if (isDevelopment) {
  console.log('ðŸ”§ Workbox running in development mode');
}

// Clean up any old caches
cleanupOutdatedCaches();

// Precache all assets generated by Workbox
precacheAndRoute(self.__WB_MANIFEST);

// Cache the Google Fonts stylesheets with a stale-while-revalidate strategy
registerRoute(
  ({url}) => url.origin === 'https://fonts.googleapis.com',
  new StaleWhileRevalidate({
    cacheName: 'google-fonts-stylesheets',
  })
);

// Cache the underlying font files with a cache-first strategy for 1 year
registerRoute(
  ({url}) => url.origin === 'https://fonts.gstatic.com',
  new CacheFirst({
    cacheName: 'google-fonts-webfonts',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 30,
        maxAgeSeconds: 60 * 60 * 24 * 365, // 1 year
      }),
    ],
  })
);

// Cache images with cache-first strategy
registerRoute(
  ({request}) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
      }),
    ],
  })
);

// Cache TensorFlow models and ML assets
registerRoute(
  /\.(?:tfjs|bin|pb|json)$/,
  new CacheFirst({
    cacheName: 'ml-models-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 20,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
      }),
    ],
  })
);

// Network-first strategy for API calls with background sync
const bgSyncPlugin = new BackgroundSyncPlugin('api-queue', {
  maxRetentionTime: 24 * 60 // Retry for max of 24 Hours
});

registerRoute(
  /\/api\//,
  new NetworkFirst({
    cacheName: 'api-cache',
    plugins: [
      bgSyncPlugin,
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 5 * 60, // 5 minutes
      }),
    ],
  })
);

// Cache CSS and JS files
registerRoute(
  ({request}) => request.destination === 'script' || request.destination === 'style',
  new StaleWhileRevalidate({
    cacheName: 'assets-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 7 * 24 * 60 * 60, // 7 days
      }),
    ],
  })
);

// Network-first for HTML documents
registerRoute(
  ({request}) => request.destination === 'document',
  new NetworkFirst({
    cacheName: 'pages-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 10,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
      }),
    ],
  })
);

// Listen for skip waiting message
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Enhanced error handling for development
if (isDevelopment) {
  self.addEventListener('install', () => {
    console.log('ðŸ”§ Workbox SW installed in development mode');
  });
  
  self.addEventListener('activate', () => {
    console.log('ðŸ”§ Workbox SW activated in development mode');
  });
}
  '/assets/teachable-handdrawn.svg',
  '/assets/machine-handdrawn.svg',
  '/assets/footer.svg',
  '/assets/intro.svg',
  '/assets/cam-icon.svg',
  '/assets/mic-icon.svg',
  '/assets/speaker-icon.svg',
  '/assets/play-icon.svg',
  '/assets/teachable-machine-splash-desktop.svg',
  '/assets/teachable-machine-splash-mobile.svg',
  '/assets/static/favicon/favicon-152.png',
  '/assets/static/favicon/favicon-192.png',
  '/assets/static/favicon/favicon.ico',
  '/assets/static/share-image.jpg'
];

// Install event â€“ cache essential files first, then additional assets
self.addEventListener('install', (event) => {
  console.log('SW installing...');
  
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('SW caching core assets');
        // Cache core assets first (critical for app to work)
        return cache.addAll(CORE_ASSETS)
          .catch((error) => {
            console.error('Failed to cache core assets:', error);
            
            if (isDevelopment) {
              console.warn('ðŸ”§ Development: Continuing despite cache errors');
              return Promise.resolve();
            throw error;
          });
      })
      .then(() => {
        if (isDevelopment) {
          console.log('SW skipping additional assets in development');
          return Promise.resolve();
        }
        
        console.log('SW caching additional assets');
        // Cache additional assets (nice to have) - only in production
        return caches.open(CACHE_NAME).then((cache) => {
          return Promise.allSettled(
            ASSETS_TO_CACHE.map((url) =>
              cache.add(url).catch((err) => {
                console.warn(`Failed to cache ${url}:`, err);
                return null;
              })
            )
          );
        });
      })
      .then(() => {
        console.log('SW installation complete');
        return self.skipWaiting();
      })
      .catch((error) => {
        console.error('SW installation failed:', error);
        
        if (isDevelopment) {
          console.warn('ðŸ”§ Development: Service worker installation failed, but continuing...');
          return self.skipWaiting();
        }
        
        throw error;
      })
  );
});

// Activate event â€“ clean up old caches and take control
self.addEventListener('activate', (event) => {
  console.log('SW activating...');
  
  event.waitUntil(
    caches.keys()
      .then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
            if (cacheName !== CACHE_NAME) {
              console.log('SW deleting old cache:', cacheName);
              return caches.delete(cacheName);
            }
          })
        );
      })
      .then(() => {
        console.log('SW activated and ready');
        return self.clients.claim();
      })
  );
});

// Fetch event â€“ enhanced caching strategy
self.addEventListener('fetch', (event) => {
  // Only handle GET requests
  if (event.request.method !== 'GET') return;
  
  // Skip Chrome extension requests
  if (event.request.url.includes('chrome-extension://')) return;
  
  // Handle navigation requests (HTML pages)
  if (event.request.mode === 'navigate') {
    event.respondWith(
      caches.match(event.request)
        .then((cachedResponse) => {
          if (cachedResponse) {
            return cachedResponse;
          }
          
          return fetch(event.request)
            .then((networkResponse) => {
              // Cache successful responses
              if (networkResponse && networkResponse.status === 200) {
                const responseClone = networkResponse.clone();
                caches.open(CACHE_NAME).then((cache) => {
                  cache.put(event.request, responseClone);
                });
              }
              return networkResponse;
            })
            .catch(() => {
              // Offline fallback for navigation
              return caches.match(OFFLINE_URL);
            });
        })
    );
    return;
  }
  
  // Handle other requests (assets, API calls, etc.)
  event.respondWith(
    caches.match(event.request)
      .then((cachedResponse) => {
        if (cachedResponse) {
          // Serve from cache if available
          return cachedResponse;
        }

        // Not in cache â€“ fetch from network
        return fetch(event.request)
          .then((networkResponse) => {
            // Skip invalid responses
            if (
              !networkResponse ||
              networkResponse.status !== 200 ||
              networkResponse.type !== 'basic'
            ) {
              return networkResponse;
            }

            // Cache valid responses (except API calls)
            if (!event.request.url.includes('/api/')) {
              const responseClone = networkResponse.clone();
              caches.open(CACHE_NAME).then((cache) => {
                cache.put(event.request, responseClone);
              });
            }

            return networkResponse;
          })
          .catch((error) => {
            console.error('Fetch failed:', error);

            // For image requests, return a placeholder
            if (event.request.destination === 'image') {
              return new Response('', {
                status: 200,
                statusText: 'OK',
                headers: { 'Content-Type': 'image/svg+xml' }
              });
            }
            
            // For other failed requests, throw the error
            throw error;
          });
      })
  );
});

// Handle background sync for offline actions
self.addEventListener('sync', (event) => {
  if (event.tag === 'background-sync') {
    console.log('Background sync triggered');
    // Handle any background tasks here
  }
});

// Handle push notifications (for future use)
self.addEventListener('push', (event) => {
  console.log('Push message received');
  // Handle push notifications here if needed
});